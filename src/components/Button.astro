---
import { themeConfig } from '@/config'

const { light: { background: lightMode }, dark: { background: darkMode } } = themeConfig.color

---

<div
  class:list={[
  'absolute flex gap-6 top-14.6 right-7.25vw min-[823px]:max-[1024px]:right-[calc(50vw-22rem)]',
  '[@supports(-webkit-touch-callout:none)]:top-13.6', // fix position issue on ios
  'lg:(fixed w-14rem top-auto bottom-47 right-[max(5.625rem,calc(50vw-34.375rem))])',
]}
>
  <!-- Theme Toggle -->
  <button
    aria-label="Switch light/dark theme"
    class="button-theme-toggle aspect-square w-4.2 c-secondary active:scale-90 hover:c-primary"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      aria-hidden="true"
      fill="currentColor"
    >
      <path d="M12 1C5.9 1 1 5.9 1 12s4.9 11 11 11 11-4.9 11-11S18.1 1 12 1m0 20c-5.8 0-10.5-4-10.5-9S6.2 3 12 3s10.5 4 10.5 9-4.7 9-10.5 9" />
    </svg>
  </button>
</div>

<!-- Theme Toggle Script >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> -->
<script is:inline define:vars={{ lightMode, darkMode }}>
// Update theme
function updateTheme() {
  // Toggle website theme
  document.documentElement.classList.toggle('dark')

  // Get current theme
  const isDark = document.documentElement.classList.contains('dark')
  // Update meta theme color
  const metaThemeColor = document.querySelector('meta[name="theme-color"]')
  if (metaThemeColor) {
    metaThemeColor.setAttribute('content', isDark ? darkMode : lightMode)
  }

  // Update theme configuration in local storage
  localStorage.setItem('theme', isDark ? 'dark' : 'light')
  document.dispatchEvent(new Event('theme-changed'))
}

// Bind click event to the button
function setupThemeToggle() {
  // Locate theme toggle button
  const themeToggleButtons = document.querySelectorAll('.button-theme-toggle')
  // Add click listener to each button
  themeToggleButtons.forEach((button) => {
    button.addEventListener('click', () => {
      // If browser doesn't support View Transitions API, update theme directly
      if (!document.startViewTransition) {
        updateTheme()
        return
      }

      // Temporarily add markers during animation to implement view transition and disable CSS transitions
      document.documentElement.style.setProperty('view-transition-name', 'theme-transition')
      document.documentElement.setAttribute('data-theme-transition', '')

      // If browser supports View Transitions API, use it to update theme
      const themeTransition = document.startViewTransition(updateTheme)
      // Remove markers after animation
      themeTransition.finished.then(() => {
        document.documentElement.style.removeProperty('view-transition-name')
        document.documentElement.removeAttribute('data-theme-transition')
      })
    })
  })
}

// Initialize click event (on first load or page transition)
setupThemeToggle()
document.addEventListener('astro:after-swap', setupThemeToggle)
</script>
